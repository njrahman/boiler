#!/bin/sh

min=
max=
step=
num=
plotfile=
savefile=
iflag=1
nflag=1
pflag=1
rflag=1
output=
counter=0
declare -a avglife
declare -a squaresize
declare -a savearray


if [[ $# -lt 2 || $# -gt 9 ]]; then
  echo "usage: boiler [-i min max step] [-n num] {-p plotfile} | {-r statefile}";
  exit 1
fi

trap "forcequit" SIGINT #Upon receiving this, it clears all temporary files and exits

while [ "$1" != "" ]; do #Checks the command line arguments and sets flags based on what is given
  case $1 in
    -i)
      shift
      min=$1
      shift
      max=$1
      shift
      step=$1
      iflag=0;;
    -n)
      shift
      num=$1
      nflag=0;;
    -p)
      shift
      if [ "$1" = "" ]; then
        echo "-p requires a file"
        exit 1
      fi
      plotfile=$1
      pflag=0;;
    -r)
      shift
      if [ "$1" = "" ]; then
        echo "-r requires a file"
        exit 1
      fi
      savefile=$1
      rflag=0;;
    -[a-hs-zj-noq]) #All the nonacceptable characters
      echo "usage: boiler [-i min max step] [-n num] {-p plotfile} | {-r statefile}";
      exit 1;;
  esac
  shift
done

if [ $rflag = 0 ]; then #Makes sure only -r is given on a restore call
  if [[ $iflag = 0 || $nflag = 0 || $pflag = 0 ]]; then
   echo "usage: boiler [-i min max step] [-n num] {-p plotfile} | {-r statefile}";
   exit 1
  fi
fi


if [[ $iflag = 1 || $nflag = 1 ]]; then #Checks that there is a -i and -n on a regular call
  if [ $rflag = 1 ]; then
    echo "usage: boiler [-i min max step] [-n num] {-p plotfile} | {-r statefile}";
    exit 1
  fi
fi

#http://stackoverflow.com/questions/18619402/check-input-consists-only-of-numeric-characters-in-shell-script

if [ $nflag = 0 ]; then #Checks for correct input
  re='^[0-9]+$'
  if ! [[ $num =~ $re ]]; then
    echo "usage: boiler num is not a positive integer"
    exit 1
  fi
fi

if [ $iflag = 0 ]; then #Checks for correct input
  re='^[0-9]+$'
  if ! [[ $min =~ $re ]]; then
    echo "usage: boiler min is not a positive integer"
    exit 1
  elif ! [[ $max =~ $re ]]; then
    echo "usage: boiler max is not a positive integer"
    exit 1
  elif ! [[ $step =~ $re ]]; then
    echo "usage: boiler step is not a positive integer"
    exit 1
  fi
fi

if [ $rflag = 0 ]; then #First part is from Kearns' code
  if [ ! -f $savefile ]; then #Makes sure there is a save file to run on
    echo "File not found"
    exit 1
  fi
  exec 3<$savefile              # This is an open onto fd 3
  j=0
  while read -u 3 line  # Reading from fd 3
  do
    savearray[j]=${line}
    j=`expr $j + 1`
  done
  exec 3<&-             # This is a close of fd 3

  pflag=${savearray[0]} #sSaves individual data
  plotfile=${savearray[1]}
  min=${savearray[2]}
  max=${savearray[3]}
  step=${savearray[4]}
  num=${savearray[5]}


  k=0
  for((i=6;i<${#savearray[@]};i++)); do #Prints values before the save
    currmin=${savearray[i]}
    i=`expr $i + 1`
    currtime=${savearray[i]}
    echo "$currmin $currtime"
  done
fi

dump(){
  if [ -f beetle.state ]; then #Makes sure there is no previous statefile
    rm -f beetle.state
  fi

  echo "$pflag">>beetle.state #Echoes all data onto the file
  echo "$plotfile">>beetle.state
  echo "$min">>beetle.state
  echo "$max">>beetle.state
  echo "$step">>beetle.state
  echo "$num">>beetle.state

  for ((i=0;i<"$counter";i++)); do
   echo "${squaresize[i]}">>beetle.state
   echo "${avglife[i]}">>beetle.state
  done

  if [ -f plot.dat ]; then
    rm -f plot.dat
  fi


  exit 0
}

forcequit(){ #Removes all temporary files
  if [ -f plot.dat ]; then
    rm -f plot.dat
  fi
  exit 1
}

trap "echo Current square: $min " SIGUSR1
trap "dump" SIGUSR2

if [ $min -gt $max ]; then #special case
  trap - SIGUSR1
  trap "echo Current square: $min " SIGUSR1
  #fileout=$(/home/f85/kearns/public/415/p6/beetle $min $num)
  fileout=$(/home/f85/njrahman/beetle $min $num)
  wait $1
  squaresize=$min
  t=($fileout) #creates array t which holds the output of the beetle program
  avglife=${t[10]} #takes the value from index 10 of the array which is avg life

  echo "$squaresize $avglife"
fi

while [ $min -le $max ]; do #Puts data into array
  trap - SIGUSR1
  trap "echo Current square: $min " SIGUSR1
  #fileout=$(/home/f85/kearns/public/415/p6/beetle $min $num)
  fileout=$(/home/f85/njrahman/beetle $min $num)
  wait $1
  squaresize[counter]=$min
  t=($fileout) #creates array t which holds the output of the beetle program
  avglife[counter]=${t[10]} #takes the value from index 10 of the array which is avg life
  min=`expr $min + $step`

  counter=`expr $counter + 1`
done

for ((i=0;i<"$counter";i++)); do #Prints current data to output and to plot.dat
  echo "${squaresize[i]} ${avglife[i]}"
  echo "${squaresize[i]} ${avglife[i]}">>plot.dat
done


if [ $pflag = 0 ]; then #Creates plot
  gnuplot << BUTTS
  set terminal png
  set xlabel "Square Side (inches)"
  set ylabel "Mean Beetle Life (seconds)"
  set output "$plotfile"
  plot "plot.dat"
BUTTS
fi

rm -f plot.dat
